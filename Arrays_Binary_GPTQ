Basic Binary Search
Given a sorted array and a target, find its index using binary search.
🧩 Array: [2, 4, 6, 8, 10, 12]
🎯 Target: 8
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={2, 4, 6, 8, 10, 12};
        int target=8;
        int result=search(arr,target);
        System.out.println(result);
    }
    static int search(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(target<arr[mid]){
                    end=mid-1;
                }else if(target>arr[mid]){
                    start=mid+1;
                }else{
                    return mid;
                }
            }
        return -1;
    }
}
------------------------------------------------------------------------
Given a sorted array and a target, return -1 if the target doesn’t exist.
🧩 Array: [1, 3, 5, 7, 9]
🎯 Target: 4
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={1, 3, 5, 7, 9};
        int target=4;
        int result=search(arr,target);
        System.out.println(result);
    }
    static int search(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(target<arr[mid]){
                    end=mid-1;
                }else if(target>arr[mid]){
                    start=mid+1;
                }else{
                    return mid;
                }
            }
        return -1;
    }
}
-----------------------------------------------------------------------------
Find First and Last Occurrence
Given a sorted array with repeated elements, find the first and last index of a target element.
🧩 Array: [1, 2, 2, 2, 3, 4]
🎯 Target: 2
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={1, 2, 2, 2, 3, 4};
        int target=2;
        int[] result=search(arr,target);
        System.out.println(Arrays.toString(result));
    }
    static int[] search(int[] arr,int target){
        int[] ans={-1,-1};
        ans[0]=binarySearch(arr,target,true);
        if(ans[0]!=-1){
            ans[1]=binarySearch(arr,target,false);
        }
        return ans;
    }
    
    static int binarySearch(int[] arr,int target,boolean isFirst){
        int ans=-1;
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else if(target>arr[mid]){
                start=mid+1;
            }else{
                ans=mid;
                if(isFirst){
                    end=mid-1;
                }else{
                    start=mid+1;
                }
            }
        }
        return ans;
    }
}
----------------------------------------------------------------
Find Ceiling of Target (≥ target)
Given a sorted array and a target, find the smallest element greater than or equal to the target.
🧩 Array: [3, 5, 7, 9, 12, 15]
🎯 Target: 10
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={3, 5, 7, 9, 12, 15};
        int target=10;
        int result=cieling(arr,target);
        System.out.println(result);
    }
    static int cieling(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }
            if(target>arr[mid]){
                start=mid+1;
            }
        }
        return arr[start];
    }
}
---------------------------------------------------------
Find Floor of Target (≤ target)
Given a sorted array and a target, find the largest element smaller than or equal to the target.
🧩 Array: [3, 5, 7, 9, 12, 15]
🎯 Target: 10

import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={3, 5, 7, 9, 12, 15};
        int target=10;
        int result=cieling(arr,target);
        System.out.println(result);
    }
    static int cieling(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }
            if(target>arr[mid]){
                start=mid+1;
            }
        }
        return arr[start];
    }
}
-------------------------------------------------------------------
Search Insert Position
Given a sorted array and a target element, find the index where it should be inserted to maintain sorted order.
🧩 Array: [1, 3, 5, 7]
🎯 Target: 6
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={1, 3, 5, 7};
        int target=8;
        int result=insert(arr,target);
        System.out.println(result);
    }
    static int insert(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else if(target>arr[mid]){
                start=mid+1;
            }
        }
        return end+1;
    }
}
--------------------------------------------------------------------------------
Binary Search in Descending Array
Given a descending sorted array, find the index of a target element.
🧩 Array: [100, 80, 60, 40, 20]
🎯 Target: 60
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={100, 80, 60, 40, 20};
        int target=20;
        int result=insert(arr,target);
        System.out.println(result);
    }
    static int insert(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                start=mid+1;
            }else if(target>arr[mid]){
                end=mid-1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
----------------------------------------------------------------------------------
Order-Agnostic Binary Search
Given a sorted array (ascending or descending), find the index of a target element without knowing the order.
🧩 Array: [90, 70, 50, 30, 10]
🎯 Target: 50


-----------------------------------------------------------------------------------
Search in Rotated Sorted Array
Given a rotated sorted array and a target, find the index of the target if it exists, otherwise print -1.
🧩 Array: [4, 5, 6, 7, 0, 1, 2]
🎯 Target: 0


---------------------------------------------------------------------------------
Find Peak Element (Mountain Array)
Given an array where elements first increase and then decrease, find the index of the peak element.
🧩 Array: [1, 3, 5, 7, 6, 4, 2]
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int[] arr={1, 3, 5, 7, 3, 4, 2};
        int result=insert(arr);
        System.out.println(result);
    }
    static int insert(int[] arr){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(arr[mid]>arr[mid+1]){
                end=mid;
            }else{
                start=mid+1;
            }
        }
        return start;
    }
}-------------------------------------------------------------------------------------
