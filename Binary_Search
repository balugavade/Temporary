searching an element in a sorted array
class Main {
    public static void main(String[] args) {
        int[] arr={-18,-12,-4,0,2,3,4,15,16,18,22,45,89};
        int target=4;
        int result=searchElement(arr,target);
        System.out.println(result);
    }
    static int searchElement(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else if(target>arr[mid]){
                start=mid+1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
---------------------------------------------------------
OderIgnostic BinerySearch

class Main {
    public static void main(String[] args) {
        int[] arr={91,88,56,34,21,2,-1,-3};
        int target=56;
        int result=orderIgnosticBS(arr,target);
        System.out.println(result);
    }
    static int orderIgnosticBS(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        boolean isASC;
        if(arr[start]<arr[end]){
            isASC=true;
        }else{
            isASC=false;
        }
        while(start<=end){
        int mid=start+(end-start)/2;
        if(target==arr[mid]){
            return mid;
        }
        if(isASC){
            if(target<arr[mid]){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }else{
            if(target<arr[mid]){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        }
        return -1;
    }
}
-------------------------------------------------
Floor of a Number
class Main {
    public static void main(String[] args) {
        int[] arr={2,3,5,9,14,16,18};
        int target=17;
        int result=cielingOfNumber(arr,target);
        System.out.println(result);
    }
    static int cielingOfNumber(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==arr[mid]){
                return arr[mid];
            }
            if(target<arr[mid]){
                end=mid-1;
            }
            if(target>arr[mid]){
                start=mid+1;
            }
        }
        return arr[end];
    }
}
------------------------------------------------------
cieling of a Number
class Main {
    public static void main(String[] args) {
        int[] arr={2,3,5,9,14,16,18};
        int target=17;
        int result=cielingOfNumber(arr,target);
        System.out.println(result);
    }
    static int cielingOfNumber(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==arr[mid]){
                return arr[mid];
            }
            if(target<arr[mid]){
                end=mid-1;
            }
            if(target>arr[mid]){
                start=mid+1;
            }
        }
        return arr[start];
    }
}
------------------------------------------------------
Find the smallest letter greater than target

class Main {
    public static void main(String[] args) {
        char[] arr={'c','f','j'};
        char target='j';
        char result=greaterThanTarget(arr,target);
        System.out.println(result);
    }
    static char greaterThanTarget(char[] arr,char target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return arr[start%arr.length];
    }
}
---------------------------------------------------------
search the start and end position of element in an array
import java.util.Arrays;

class Main {
    public static void main(String[] args) {
        int[] arr={5,7,7,7,7,8,8,10};
        int target=7;
        int[] result=searchInRange(arr,target);
        System.out.println(Arrays.toString(result));
    }
    static int[] searchInRange(int[] arr,int target){
        int[] ans={-1,-1};
        ans[0]=search(arr,target,true);
        if(ans[0]!=-1){
            ans[1]=search(arr,target,false);
        }
        return ans;
    }
    static int search(int[] arr,int target,boolean isFirstIndex){
        int ans=-1;
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else if(target>arr[mid]){
                start=mid+1;
            }else{
                ans=mid;
                if(isFirstIndex){
                    end=mid-1;
                }else{
                    start=mid+1;
                }
            }
        }
        return ans;
    }
}
----------------------------------------------------------------------------------
position of an element in an infinite sorted Array
class Main {
    public static void main(String[] args) {
        int[] arr={3,5,7,9,10,23,43,90,100,130,140,160,170};
        int target=23;
        int result=findRange(arr,target);
        System.out.println(result);
    }
    static int findRange(int[] arr,int target){
        int start=0;
        int end=1;
        while(target>end){
            int newStart=start;
            end=end+(end-start+1)*2;
            start=newStart;
        }
        return binarySearch(arr,target);
        
    }
    static int binarySearch(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }else if(target>arr[mid]){
                start=mid+1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
------------------------------------------------------------------------------
find peak index in an array
class Main {
    public static void main(String[] args) {
        int[] arr={1,2,3,5,7,6,3,2};
        int result=findPeakIndex(arr);
        System.out.println(result);
    }
    static int findPeakIndex(int[] arr){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(arr[mid]>arr[mid+1]){
                end=mid;
            }else{
                start=mid+1;
            }
        }
        return start;
    }
}
------------------------------------------------------------------------------

